# -*- coding: utf-8 -*-
"""Implementasi Pemrograman Fungsional dalam Studi Kasus Statistika untuk Visualisasi Data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dvEMUOnlFzzGWdNBVnDGRp5fW0s7Q-YJ

MODUL 5 â€“ Implementasi Pemrograman Fungsional dalam Studi Kasus Statistika untuk Visualisasi Data.

KEGIATAN 1 (BEGINNER)

Diberikan sebuah list data berisi nilai-nilai ujian mahasiswa: [75, 80, 90, 65, 70, 85, 95, 78, 88,
92]. Buatlah sebuah program untuk menghitung rata-rata dari nilai-nilai ini. Setelah itu,
visualisasikan data tersebut dalam bentuk diagram batang menggunakan plt.bar(x,y).
"""

#KEGIATAN 1 (BEGINNER)

import matplotlib.pyplot as plt
from functools import reduce

# Data nilai - nilai ujian mahasiswa
nilai_mahasiswa = [75, 80, 90, 65, 70, 85, 95, 78, 88, 92]

# Menghitung rata-rata dengan fungsi reduce
rata_rata = reduce(lambda x, y: x + y, nilai_mahasiswa) / len(nilai_mahasiswa)

# Membuat label mahasiswa (sumbu x) dalam bentuk fungsional dinamis (list - map - lambda)
label_mahasiswa = list(map(lambda x: f"M{x+1}", range(len(nilai_mahasiswa))))

# Visualisasi data dalam bentuk diagram batang
plt.bar(label_mahasiswa, nilai_mahasiswa, color='blue')
plt.axhline(y=rata_rata, color='red', linestyle='--')
plt.xlabel('Mahasiswa')
plt.ylabel('Nilai Ujian')
plt.title('Diagram Batang Nilai Ujian Mahasiswa')
plt.show()

"""KEGIATAN 2 (INTERMEDIATE)

Diberikan daftar data transaksi penjualan produk dalam bentuk list tupel, di mana setiap tupel berisi informasi sebagai berikut: (nama_produk, harga_produk, jumlah_terjual). Anda diminta untuk membuat visualisasi scatter plot yang menunjukkan hubungan antara harga produk dan jumlah produk yang terjual serta bar untuk menyajikan pendapatan produk.
"""

#KEGIATAN 2 (INTERMEDIATE)

import matplotlib.pyplot as plt
import numpy as np

# Data transaksi penjualan produk
data_transaksi = [
    ("Produk A", 50, 10),
    ("Produk B", 30, 25),
    ("Produk C", 20, 30),
    ("Produk D", 60, 8),
    ("Produk E", 40, 15),
    ("Produk F", 70, 5),
]

# Ekstrak harga produk dan jumlah produk terjual untuk visualisasi pertama
harga_produk = [x[1] for x in data_transaksi]
jumlah_terjual = [x[2] for x in data_transaksi]

# Buat scatter plot untuk hubungan antara harga produk dan jumlah produk terjual
plt.scatter(harga_produk, jumlah_terjual)
plt.xlabel("Harga Produk")
plt.ylabel("Jumlah Produk Terjual")
plt.title("Hubungan Harga Produk dan Jumlah Produk Terjual")
plt.show()

# Hitung total pendapatan untuk setiap produk
pendapatan_produk = [x[1] * x[2] for x in data_transaksi]

# Tambahkan bar chart untuk menyajikan pendapatan produk
nama_produk = [x[0] for x in data_transaksi]
plt.bar(nama_produk, pendapatan_produk)
plt.xlabel("Nama Produk")
plt.ylabel("Pendapatan Produk")
plt.title("Pendapatan Produk")
plt.show()

"""KEGIATAN 3 (ADVANCE)

Diberikan sebuah list data berisi tinggi badan beberapa individu dalam sentimeter: [165, 170, 155, 180, 160, 175, 165, 185, 175, 170, 160]. Buatlah sebuah program untuk menghitung frekuensi tinggi badan dalam interval tertentu (misalnya: 150-160, 161-170, dst.) dan visualisasikan data tersebut dalam bentuk histogram dan kurva PDF dari distribusi normal yang dihasilkan dari data tinggi badan yang ada.

"""

import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import norm

# Data tinggi badan individu dalam sentimeter
tinggi_badan = [165, 170, 155, 180, 160, 175, 165, 185, 175, 170, 160]

# Interval ukuran per 10 sentimeter
interval_size = 10

# Menghitung frekuensi tinggi badan dalam interval
hist, bin_edges = np.histogram(tinggi_badan, bins=range(min(tinggi_badan), max(tinggi_badan) + interval_size, interval_size))

# Visualisasi data dalam bentuk histogram
plt.hist(tinggi_badan, bins=range(min(tinggi_badan), max(tinggi_badan) + interval_size, interval_size), alpha=1, color='blue', edgecolor='black')

# Menambahkan kurva pdf pada hasil visualisasi data
mean = np.mean(tinggi_badan)
std = np.std(tinggi_badan)
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, mean, std)
plt.plot(x, p * len(tinggi_badan) * interval_size, color='red', linewidth=2)

title = "Distribusi Tinggi Badan"
plt.title(title)
plt.xlabel('Tinggi Badan (cm)')
plt.ylabel('Frekuensi')
plt.grid(axis='y', alpha=0.75)

# Tampilkan plot
plt.show()